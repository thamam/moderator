"""
Git operations management module.
"""

# src/git_manager.py

import subprocess
import os
from pathlib import Path
from .models import Task

class GitManager:
    """Manages Git operations and PR creation"""

    def __init__(self, repo_path: str = "."):
        self.repo_path = Path(repo_path)

    def _run_git(self, *args) -> subprocess.CompletedProcess:
        """Run git command"""
        return subprocess.run(
            ["git", "-C", str(self.repo_path)] + list(args),
            capture_output=True,
            text=True,
            check=True
        )

    def create_branch(self, task: Task) -> str:
        """Create feature branch for task"""

        # Generate branch name
        branch_name = f"moderator-gear1/task-{task.id}"

        try:
            # Create and checkout branch
            self._run_git("checkout", "-b", branch_name)
            task.branch_name = branch_name
            return branch_name
        except subprocess.CalledProcessError as e:
            raise Exception(f"Failed to create branch: {e.stderr}")

    def commit_changes(self, task: Task, files: list[str]) -> None:
        """Commit generated files"""

        try:
            # Stage files
            for file_path in files:
                self._run_git("add", file_path)

            # Create commit message
            message = self._format_commit_message(task)

            # Commit
            self._run_git("commit", "-m", message)

        except subprocess.CalledProcessError as e:
            raise Exception(f"Failed to commit: {e.stderr}")

    def _format_commit_message(self, task: Task) -> str:
        """Format structured commit message"""

        criteria_text = "\n".join(f"- {c}" for c in task.acceptance_criteria)

        return f"""feat: {task.description[:60]}

Task ID: {task.id}

Acceptance Criteria:
{criteria_text}

Generated by: Moderator Gear 1
"""

    def create_pr(self, task: Task) -> tuple[str, int]:
        """Create pull request via GitHub CLI"""

        try:
            # Format PR body
            pr_body = self._format_pr_body(task)

            # Create PR using gh CLI
            result = subprocess.run(
                ["gh", "pr", "create",
                 "--title", f"Task {task.id}: {task.description[:50]}",
                 "--body", pr_body],
                capture_output=True,
                text=True,
                check=True,
                cwd=self.repo_path
            )

            # Extract PR URL from output
            pr_url = result.stdout.strip()

            # Get PR number
            pr_number = int(pr_url.split('/')[-1])

            return pr_url, pr_number

        except subprocess.CalledProcessError as e:
            raise Exception(f"Failed to create PR: {e.stderr}")
        except FileNotFoundError:
            raise Exception("GitHub CLI (gh) not installed")

    def _format_pr_body(self, task: Task) -> str:
        """Format PR description"""

        criteria_checklist = "\n".join(
            f"- [x] {c}" for c in task.acceptance_criteria
        )

        files_list = "\n".join(
            f"- `{f}`" for f in task.files_generated
        )

        return f"""## Task Description
{task.description}

## Acceptance Criteria
{criteria_checklist}

## Files Generated
{files_list}

## Review Notes
- This PR was generated automatically by Moderator Gear 1
- Please review code quality and verify acceptance criteria
- Manual testing recommended before merge

---
Generated by: **Moderator Gear 1** ðŸ¤–
Task ID: `{task.id}`
"""